{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shahnawaj9/titanic-machine-learning?scriptVersionId=236846722\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"013d8ca8","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-04-29T14:39:28.510403Z","iopub.status.busy":"2025-04-29T14:39:28.509987Z","iopub.status.idle":"2025-04-29T14:39:32.848796Z","shell.execute_reply":"2025-04-29T14:39:32.84796Z"},"papermill":{"duration":4.345077,"end_time":"2025-04-29T14:39:32.850342","exception":false,"start_time":"2025-04-29T14:39:28.505265","status":"completed"},"tags":[]},"outputs":[],"source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv\n","\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import OneHotEncoder\n","\n","# machine learning\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","\n","#ignore warnings\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":2,"id":"1f61e6f6","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:32.859885Z","iopub.status.busy":"2025-04-29T14:39:32.858944Z","iopub.status.idle":"2025-04-29T14:39:32.894206Z","shell.execute_reply":"2025-04-29T14:39:32.893217Z"},"papermill":{"duration":0.040443,"end_time":"2025-04-29T14:39:32.895642","exception":false,"start_time":"2025-04-29T14:39:32.855199","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["***************** Train ********************\n","Number of rows : 891\n","Number of columns : 12\n","***************** Test *********************\n","Number of rows : 418\n","Number of columns : 11\n","*********************************************\n"]}],"source":["train  = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n","test  = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n","print(\"***************** Train ********************\")\n","print(f\"Number of rows : {train.shape[0]}\")\n","print(f\"Number of columns : {train.shape[1]}\")\n","\n","print(\"***************** Test *********************\")\n","print(f\"Number of rows : {test.shape[0]}\")\n","print(f\"Number of columns : {test.shape[1]}\")\n","print(\"*********************************************\")"]},{"cell_type":"code","execution_count":3,"id":"0c676716","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:32.902717Z","iopub.status.busy":"2025-04-29T14:39:32.902413Z","iopub.status.idle":"2025-04-29T14:39:32.934761Z","shell.execute_reply":"2025-04-29T14:39:32.933765Z"},"papermill":{"duration":0.03736,"end_time":"2025-04-29T14:39:32.936047","exception":false,"start_time":"2025-04-29T14:39:32.898687","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["******************************* Train ************************************\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n","None\n","******************************* Test ************************************\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 418 entries, 0 to 417\n","Data columns (total 11 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  418 non-null    int64  \n"," 1   Pclass       418 non-null    int64  \n"," 2   Name         418 non-null    object \n"," 3   Sex          418 non-null    object \n"," 4   Age          332 non-null    float64\n"," 5   SibSp        418 non-null    int64  \n"," 6   Parch        418 non-null    int64  \n"," 7   Ticket       418 non-null    object \n"," 8   Fare         417 non-null    float64\n"," 9   Cabin        91 non-null     object \n"," 10  Embarked     418 non-null    object \n","dtypes: float64(2), int64(4), object(5)\n","memory usage: 36.1+ KB\n","None\n"]}],"source":["print(\"******************************* Train ************************************\")\n","print(train.info())\n","print(\"******************************* Test ************************************\")\n","print(test.info())"]},{"cell_type":"code","execution_count":4,"id":"2077e71c","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:32.943752Z","iopub.status.busy":"2025-04-29T14:39:32.943406Z","iopub.status.idle":"2025-04-29T14:39:32.976577Z","shell.execute_reply":"2025-04-29T14:39:32.975569Z"},"papermill":{"duration":0.038743,"end_time":"2025-04-29T14:39:32.978174","exception":false,"start_time":"2025-04-29T14:39:32.939431","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pclass                                               Name     Sex   Age  \\\n","0       3                            Braund, Mr. Owen Harris    male  22.0   \n","1       1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n","2       3                             Heikkinen, Miss. Laina  female  26.0   \n","3       1       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n","4       3                           Allen, Mr. William Henry    male  35.0   \n","\n","   SibSp  Parch            Ticket     Fare Cabin Embarked  \n","0      1      0         A/5 21171   7.2500   NaN        S  \n","1      1      0          PC 17599  71.2833   C85        C  \n","2      0      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      1      0            113803  53.1000  C123        S  \n","4      0      0            373450   8.0500   NaN        S  "]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.model_selection import train_test_split\n","y = train.Survived\n","passenger_ids = test['PassengerId'].copy()\n","X = train.drop(['Survived','PassengerId'], axis=1)\n","test = test.drop(['PassengerId'], axis=1)\n","# Divide data into training and validation subsets\n","X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n","                                                                random_state=0)\n","X.head()\n"]},{"cell_type":"code","execution_count":5,"id":"07b97500","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:32.9864Z","iopub.status.busy":"2025-04-29T14:39:32.985757Z","iopub.status.idle":"2025-04-29T14:39:33.002904Z","shell.execute_reply":"2025-04-29T14:39:33.002059Z"},"papermill":{"duration":0.022716,"end_time":"2025-04-29T14:39:33.004348","exception":false,"start_time":"2025-04-29T14:39:32.981632","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Ticket</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>140</th>\n","      <td>Boulos, Mrs. Joseph (Sultana)</td>\n","      <td>female</td>\n","      <td>2678</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>15.2458</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>Kvillner, Mr. Johan Henrik Johannesson</td>\n","      <td>male</td>\n","      <td>C.A. 18723</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>2</td>\n","      <td>31.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10.5000</td>\n","    </tr>\n","    <tr>\n","      <th>817</th>\n","      <td>Mallet, Mr. Albert</td>\n","      <td>male</td>\n","      <td>S.C./PARIS 2079</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","      <td>2</td>\n","      <td>31.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>37.0042</td>\n","    </tr>\n","    <tr>\n","      <th>378</th>\n","      <td>Betros, Mr. Tannous</td>\n","      <td>male</td>\n","      <td>2648</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","      <td>3</td>\n","      <td>20.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4.0125</td>\n","    </tr>\n","    <tr>\n","      <th>491</th>\n","      <td>Windelov, Mr. Einar</td>\n","      <td>male</td>\n","      <td>SOTON/OQ 3101317</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>3</td>\n","      <td>21.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                       Name     Sex            Ticket Cabin  \\\n","140           Boulos, Mrs. Joseph (Sultana)  female              2678   NaN   \n","439  Kvillner, Mr. Johan Henrik Johannesson    male        C.A. 18723   NaN   \n","817                      Mallet, Mr. Albert    male   S.C./PARIS 2079   NaN   \n","378                     Betros, Mr. Tannous    male              2648   NaN   \n","491                     Windelov, Mr. Einar    male  SOTON/OQ 3101317   NaN   \n","\n","    Embarked  Pclass   Age  SibSp  Parch     Fare  \n","140        C       3   NaN      0      2  15.2458  \n","439        S       2  31.0      0      0  10.5000  \n","817        C       2  31.0      1      1  37.0042  \n","378        C       3  20.0      0      0   4.0125  \n","491        S       3  21.0      0      0   7.2500  "]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# Select categorical columns with relatively low cardinality (convenient but arbitrary)\n","categorical_cols = [cname for cname in X_train.columns if  \n","                        X_train[cname].dtype == \"object\"]\n","\n","# Select numerical columns\n","numerical_cols = [cname for cname in X_train.columns if X_train[cname].dtype in ['int64', 'float64']]\n","\n","# Keep selected columns only\n","my_cols = categorical_cols + numerical_cols\n","X_train = X_train[my_cols].copy()\n","X_valid = X_valid[my_cols].copy()\n","test = test[my_cols].copy()\n","X_train.head()"]},{"cell_type":"code","execution_count":6,"id":"e8dbdfb7","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:33.014539Z","iopub.status.busy":"2025-04-29T14:39:33.014215Z","iopub.status.idle":"2025-04-29T14:39:33.019555Z","shell.execute_reply":"2025-04-29T14:39:33.018621Z"},"papermill":{"duration":0.012748,"end_time":"2025-04-29T14:39:33.021247","exception":false,"start_time":"2025-04-29T14:39:33.008499","status":"completed"},"tags":[]},"outputs":[],"source":["# Preprocessing for numerical data\n","numerical_transformer = SimpleImputer(strategy='constant')\n","\n","# Preprocessing for categorical data\n","categorical_transformer = Pipeline(steps=[\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","# Bundle preprocessing for numerical and categorical data\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numerical_transformer, numerical_cols),\n","        ('cat', categorical_transformer, categorical_cols)\n","    ])"]},{"cell_type":"code","execution_count":7,"id":"f3ffcf00","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:33.029944Z","iopub.status.busy":"2025-04-29T14:39:33.029132Z","iopub.status.idle":"2025-04-29T14:39:33.060993Z","shell.execute_reply":"2025-04-29T14:39:33.06012Z"},"papermill":{"duration":0.03794,"end_time":"2025-04-29T14:39:33.06271","exception":false,"start_time":"2025-04-29T14:39:33.02477","status":"completed"},"tags":[]},"outputs":[],"source":["# Add new features to your training set\n","X['FamilySize'] = X['SibSp'] + X['Parch'] + 1\n","X['IsAlone'] = (X['FamilySize'] == 1).astype(int)\n","\n","# You can also extract title from Name\n","X['Title'] = X['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n","\n","test['FamilySize'] = test['SibSp'] + test['Parch'] + 1\n","test['IsAlone'] = (test['FamilySize'] == 1).astype(int)\n","test['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)  # Define this function as used in training\n","\n","# Extract Deck from Cabin\n","X['Deck'] = X['Cabin'].apply(lambda x: x[0] if pd.notna(x) else 'U')\n","test['Deck'] = test['Cabin'].apply(lambda x: x[0] if pd.notna(x) else 'U')\n","\n","# Fare Binning\n","X['FareBin'] = pd.qcut(X['Fare'], 4, labels=False)\n","test['FareBin'] = pd.qcut(test['Fare'], 4, labels=False)\n","\n","# Age Binning\n","X['AgeBin'] = pd.cut(X['Age'], 5, labels=False)\n","test['AgeBin'] = pd.cut(test['Age'], 5, labels=False)\n","\n","# Ticket Prefix\n","X['TicketPrefix'] = X['Ticket'].apply(lambda x: x.split()[0] if not x.isdigit() else 'None')\n","test['TicketPrefix'] = test['Ticket'].apply(lambda x: x.split()[0] if not x.isdigit() else 'None')\n"]},{"cell_type":"code","execution_count":8,"id":"2f679173","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:33.071385Z","iopub.status.busy":"2025-04-29T14:39:33.071037Z","iopub.status.idle":"2025-04-29T14:39:33.129591Z","shell.execute_reply":"2025-04-29T14:39:33.128879Z"},"papermill":{"duration":0.064611,"end_time":"2025-04-29T14:39:33.131066","exception":false,"start_time":"2025-04-29T14:39:33.066455","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AgeBin</th>\n","      <th>FareBin</th>\n","      <th>FamilySize</th>\n","      <th>Sex_female</th>\n","      <th>Sex_male</th>\n","      <th>Embarked_C</th>\n","      <th>Embarked_Q</th>\n","      <th>Embarked_S</th>\n","      <th>Pclass_1</th>\n","      <th>Pclass_2</th>\n","      <th>...</th>\n","      <th>TicketPrefix_SOTON/O.Q.</th>\n","      <th>TicketPrefix_SOTON/O2</th>\n","      <th>TicketPrefix_SOTON/OQ</th>\n","      <th>TicketPrefix_STON/O</th>\n","      <th>TicketPrefix_STON/O2.</th>\n","      <th>TicketPrefix_SW/PP</th>\n","      <th>TicketPrefix_W./C.</th>\n","      <th>TicketPrefix_W.E.P.</th>\n","      <th>TicketPrefix_W/C</th>\n","      <th>TicketPrefix_WE/P</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 83 columns</p>\n","</div>"],"text/plain":["   AgeBin  FareBin  FamilySize  Sex_female  Sex_male  Embarked_C  Embarked_Q  \\\n","0     1.0      0.0         2.0         0.0       1.0         0.0         0.0   \n","1     2.0      3.0         2.0         1.0       0.0         1.0         0.0   \n","2     1.0      1.0         1.0         1.0       0.0         0.0         0.0   \n","3     2.0      3.0         2.0         1.0       0.0         0.0         0.0   \n","4     2.0      1.0         1.0         0.0       1.0         0.0         0.0   \n","\n","   Embarked_S  Pclass_1  Pclass_2  ...  TicketPrefix_SOTON/O.Q.  \\\n","0         1.0       0.0       0.0  ...                      0.0   \n","1         0.0       1.0       0.0  ...                      0.0   \n","2         1.0       0.0       0.0  ...                      0.0   \n","3         1.0       1.0       0.0  ...                      0.0   \n","4         1.0       0.0       0.0  ...                      0.0   \n","\n","   TicketPrefix_SOTON/O2  TicketPrefix_SOTON/OQ  TicketPrefix_STON/O  \\\n","0                    0.0                    0.0                  0.0   \n","1                    0.0                    0.0                  0.0   \n","2                    0.0                    0.0                  0.0   \n","3                    0.0                    0.0                  0.0   \n","4                    0.0                    0.0                  0.0   \n","\n","   TicketPrefix_STON/O2.  TicketPrefix_SW/PP  TicketPrefix_W./C.  \\\n","0                    0.0                 0.0                 0.0   \n","1                    0.0                 0.0                 0.0   \n","2                    1.0                 0.0                 0.0   \n","3                    0.0                 0.0                 0.0   \n","4                    0.0                 0.0                 0.0   \n","\n","   TicketPrefix_W.E.P.  TicketPrefix_W/C  TicketPrefix_WE/P  \n","0                  0.0               0.0                0.0  \n","1                  0.0               0.0                0.0  \n","2                  0.0               0.0                0.0  \n","3                  0.0               0.0                0.0  \n","4                  0.0               0.0                0.0  \n","\n","[5 rows x 83 columns]"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["numerical_cols = ['AgeBin', 'FareBin', 'FamilySize']\n","categorical_cols = ['Sex', 'Embarked', 'Pclass', 'Title', 'IsAlone','Deck','TicketPrefix']\n","\n","\n","# Then update your preprocessor like before\n","# Preprocessing for numerical data\n","numerical_transformer = SimpleImputer(strategy='constant')\n","\n","# Preprocessing for categorical data\n","categorical_transformer = Pipeline(steps=[\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","# Bundle preprocessing for numerical and categorical data\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numerical_transformer, numerical_cols),\n","        ('cat', categorical_transformer, categorical_cols)\n","    ])\n","\n","preprocessor.fit(X)\n","\n","# Extract OneHot column names\n","ohe = preprocessor.named_transformers_['cat'].named_steps['onehot']\n","ohe_columns = ohe.get_feature_names_out(categorical_cols)\n","\n","# Combine with numerical column names\n","all_columns = numerical_cols + list(ohe_columns)\n","\n","# Transform and convert to DataFrame\n","X_transformed = preprocessor.transform(X)\n","X_df = pd.DataFrame(X_transformed.toarray() if hasattr(X_transformed, \"toarray\") else X_transformed,\n","                    columns=all_columns)\n","\n","X_df.head()\n"]},{"cell_type":"code","execution_count":9,"id":"b539c732","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:33.13989Z","iopub.status.busy":"2025-04-29T14:39:33.139564Z","iopub.status.idle":"2025-04-29T14:39:33.145253Z","shell.execute_reply":"2025-04-29T14:39:33.144539Z"},"papermill":{"duration":0.011511,"end_time":"2025-04-29T14:39:33.146633","exception":false,"start_time":"2025-04-29T14:39:33.135122","status":"completed"},"tags":[]},"outputs":[],"source":["from sklearn.ensemble import VotingClassifier, RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.linear_model import LogisticRegression\n","\n","voting_model = VotingClassifier(estimators=[\n","    ('rf', RandomForestClassifier(n_estimators=100, random_state=1)),\n","    ('gb', GradientBoostingClassifier(n_estimators=100, random_state=1)),\n","    ('lr', LogisticRegression(max_iter=1000)),\n","    ('xgb', XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=1))\n","], voting='soft')  # 'soft' gives better results if models support predict_proba\n","\n","# Full pipeline\n","my_pipeline = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('model', voting_model)\n","])\n"]},{"cell_type":"code","execution_count":10,"id":"0bf9d1c4","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:33.155248Z","iopub.status.busy":"2025-04-29T14:39:33.154921Z","iopub.status.idle":"2025-04-29T14:39:33.1593Z","shell.execute_reply":"2025-04-29T14:39:33.158366Z"},"papermill":{"duration":0.010394,"end_time":"2025-04-29T14:39:33.160792","exception":false,"start_time":"2025-04-29T14:39:33.150398","status":"completed"},"tags":[]},"outputs":[],"source":["# X['Title'] = X['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', \n","#                                  'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n","# X['Title'] = X['Title'].replace({'Mlle': 'Miss', 'Ms': 'Miss', 'Mme': 'Mrs'})\n"]},{"cell_type":"code","execution_count":11,"id":"ccd5ea17","metadata":{"execution":{"iopub.execute_input":"2025-04-29T14:39:33.169879Z","iopub.status.busy":"2025-04-29T14:39:33.169599Z","iopub.status.idle":"2025-04-29T15:46:00.910546Z","shell.execute_reply":"2025-04-29T15:46:00.907537Z"},"papermill":{"duration":3987.751482,"end_time":"2025-04-29T15:46:00.916307","exception":false,"start_time":"2025-04-29T14:39:33.164825","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Best score: 0.8271797125102003\n"]}],"source":["from sklearn.model_selection import GridSearchCV\n","\n","param_grid = {\n","    # Random Forest\n","     'model__rf__n_estimators': [100, 200],\n","     'model__rf__max_depth': [None, 5, 10],\n","    \n","    # # Gradient Boosting\n","    'model__gb__n_estimators': [100, 200],\n","    'model__gb__learning_rate': [0.05, 0.1],\n","    'model__gb__max_depth': [3, 5],\n","    \n","    # # Logistic Regression\n","    'model__lr__C': [0.1, 1.0, 10.0],\n","    'model__lr__penalty': ['l2'],\n","    'model__lr__solver': ['liblinear'],\n","    \n","    'model__xgb__n_estimators': [100, 200],\n","    'model__xgb__max_depth': [3, 5],\n","    'model__xgb__learning_rate': [0.05, 0.1]\n","}\n","grid_search = GridSearchCV(my_pipeline, param_grid, cv=5, scoring='accuracy')\n","grid_search.fit(X, y)\n","\n","best_model = grid_search.best_estimator_\n","print(\"Best score:\", grid_search.best_score_)\n"]},{"cell_type":"code","execution_count":12,"id":"c0f50716","metadata":{"execution":{"iopub.execute_input":"2025-04-29T15:46:00.925897Z","iopub.status.busy":"2025-04-29T15:46:00.925591Z","iopub.status.idle":"2025-04-29T15:46:00.970552Z","shell.execute_reply":"2025-04-29T15:46:00.968884Z"},"papermill":{"duration":0.051361,"end_time":"2025-04-29T15:46:00.972204","exception":false,"start_time":"2025-04-29T15:46:00.920843","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Your submission was successfully saved!\n"]}],"source":["preds = best_model.predict(test)\n","output = pd.DataFrame({'PassengerId': passenger_ids, 'Survived': preds})\n","output.to_csv('submission.csv', index=False)\n","print(\"Your submission was successfully saved!\")"]},{"cell_type":"code","execution_count":null,"id":"1c00b17e","metadata":{"papermill":{"duration":0.003474,"end_time":"2025-04-29T15:46:00.980374","exception":false,"start_time":"2025-04-29T15:46:00.9769","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":26502,"sourceId":3136,"sourceType":"competition"}],"dockerImageVersionId":31012,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.11"},"papermill":{"default_parameters":{},"duration":3998.218954,"end_time":"2025-04-29T15:46:01.708678","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-04-29T14:39:23.489724","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}